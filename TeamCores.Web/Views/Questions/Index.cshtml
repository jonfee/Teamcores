@{
    ViewData["Title"] = "考题管理";
}

<div id="question_list">
    <div class="searcher">
        <span>
            关键字：
            <i-input v-model="queries.keyword" placeholder="题目" style="width : 250px"></i-input>
        </span>
        <span>
            课程：
            <i-select v-model="queries.course" style="width : 100px">
                <i-option value="" key="">全部</i-option>
                <i-option v-for="item in courses" :value="item.CourseId" :key="item.CourseId">{{item.Title}}</i-option>
            </i-select>
        </span>
        <span>
            状态：
            <i-select v-model="queries.status" style="width : 100px">
                <i-option value="" key="">全部</i-option>
                <i-option v-for="item in CourseStatus.items" :value="item.value" v-once :key="item.value">{{ item.text }}</i-option>
            </i-select>
        </span>
        <span>
            <i-button type="primary" icon="ios-search" v-on:click="search">搜索</i-button>
        </span>
    </div>
    <i-table :columns="gridColumns" :data="gridData"></i-table>
    <Page class-name="pager" :total="queries.total" :current="queries.p" :paeg-size="queries.size" v-on:on-change="pagerChanged" show-total>
    </Page>
</div>
@section title_actions{
    <i-button type="success" v-on:click="goTo('/questions/add')">新增</i-button>
}


@section page_script{
    <script>
        var vm = new Vue({
            el : '#content',
			data: {
				queries: {},
                courses : {}, // 所有课程
                gridColumns : [
                    {
                        key : 'Topic',
                        title : '题目'
                    },
                    {
                        key : 'Type',
                        title : '题目类型',
                        render(h, params)
                        {
                            return QuestionType.getItem(params.row.Type);
                        }
                    },
                    {
                        key : 'CourseId',
                        title : '归属课程',
                        render(h, params)
                        {
                            return vm.findCourseName(params.row.CourseId);
                        }
                    },
                    {
                        key : 'Count',
                        title : '使用次数'
                    },
                    {
                        key : 'Marking',
						title: '是否需要阅卷',
						render(h, params) {
							return params.row.Marking ? "是" : "否";
						}
                    },
                    {
                        key : 'Status',
                        title : '状态',
                        render(h, params)
                        {
                            return QuestionStatus.getItem(params.row.Status);
                        }
                    },
                    {
                        key : 'CreateTime',
                        title : '创建时间',
                        render(h, params)
                        {
                            return new Date(Date.parse(params.row.CreateTime)).format('yyyy-MM-dd hh:mm:ss');
                        }
                    },
                    {
                        key : 'actions',
                        title : '操作',
                        width : 200,
                        render(h, params)
                        {
                            return h('p',
                                [
                                    h('i-button',
                                        {
                                            props : {
                                                type : 'primary',
                                                size : 'small'
                                            },
                                            style : {
                                                marginRight : '5px'
                                            },
                                            on : {
                                                click : () =>
                                                {
                                                    vm.goEdit(params.row);
                                                }
                                            }
                                        },
                                        '编辑'),
                                    h('i-button',
                                        {
                                            props : {
                                                type : 'error',
                                                size : 'small'
											},
											style: {
												marginRight: '5px'
											},
                                            on : {
                                                click : () =>
                                                {
                                                    vm.setStatus(params.index);
                                                }
                                            }
                                        },
                                        params.row.Status == CourseStatus.ENABLED.value
                                        ? CourseStatus.DISABLED.text
                                        : CourseStatus.ENABLED.text),
                                    h('i-button',
                                        {
                                            props : {
                                                type : 'primary',
                                                size : 'small'
                                            },
                                            on : {
                                                click : () =>
                                                {
                                                    vm.onDelte(params.row.QuestionId);
                                                }
                                            }
                                        },
                                        '删除')
                                ]);
                        }
                    }
                ],
                gridData : []
            },
            created : function()
            {
            },
            mounted()
			{
				this.loadQueries();
                this.loadCourses();
                this.loadData();
            },
            methods :
			{
				/**
				 * 加载筛选条件
				 */
				loadQueries() {
					let pageIndex,
						status;

					pageIndex =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["p"] + "'"));
					pageIndex = isNaN(pageIndex) ? 1 : Number(pageIndex);
					if (pageIndex < 1) pageIndex = 1;

					status =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["status"] + "'"));
					if (status != "" && !isNaN(status)) status = Number(status);

					this.queries["p"] = pageIndex;
					this.queries["size"] = 15;
					this.queries["keyword"] = @(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["keyword"] + "'"));
					this.queries["course"] = @(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["course"] + "'"));
					this.queries["status"] = status;
				},
				/**
				 * 分页页码改变回调事件
				 * @@param {number} current 当前页码
				 */
				pagerChanged(current) {
					this.queries["p"] = current;
					this.reload();
				},
				/**
                 * 搜索
                */
				search() {
					this.queries["p"] = 1;
					this.reload();
				},
				/**
				 * 重新加载
				 */
				reload() {
					var url = buildUrl(location.href.toString(), this.queries);
					location.href = url;
				},
                
                /**
                 * 获取所有的课程
                 */
				loadCourses()
                {
                    Ajax.post({
                        url : "/api/course/search",
                        data : {
                            pageIndex : 1,
                            pageSize : 100
                        },
                        success : (response) =>
                        {
                            var data = response.data;
							if (!data.Error) {
								const pager = data.Data;
								this.courses = pager.Table;
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error("加载课程数据失败，请重试！");
						}
                    });
                },
                /**
                 * 根据课程Id获取课程名称
                 * @@param courseId 课程Id
                 */
                findCourseName(courseId)
                {
                    const find = this.courses &&
                        this.courses.length > 0 &&
                        this.courses.find((item) =>
                        {
                            return item.CourseId == courseId;
                        });

                    return find && find.Title;
                },
                /**
                 * 加载数据，会自动从searchQuery中解析搜索的参数
                 */
                loadData()
                {
					const postData = {
						keyword: this.queries.keyword,
						status: this.queries.status,
						courseId: this.queries.course,
						pageindex: this.queries.p,
						pagesize: this.queries.size
                    };

                    Ajax.post({
                        url : "/api/question/search",
                        data : postData,
                        success : (response) =>
                        {
                            var data = response.data;
							if (!data.Error) {
								const pager = data.Data;
								this.gridData = pager.Table;

								this.queries["total"] = pager.Count;
							} else {
								apiError(data.Code,data.Message);
							}
						},
						error: (error) => {
							apiError(null, "加载数据失败，请重试！");
						}
                    });
                },
                /**
                 * 跳转到编辑页面
                 * @@param item 选中的课程
                 */
                goEdit(item)
                {
                    const questionId = item.QuestionId;
                    location = `/questions/edit/${questionId}`;
                },

                /**
                 * 删除点击事件
                 * @@param questionId 考题Id
                 */
                onDelte(questionId)
                {
                    this.$Modal.confirm({
                        title : '系统提示',
                        content : '确认要删除该考题吗?',
                        onOk : () =>
                        {
                            this.deleteQuestion(questionId);
                        },
                        onCancel : () =>
                        {
                        }
                    });
                },

                /**
                 * 删除
                 * @@param subjectId
                 */
                deleteQuestion(questionId)
                {
                    Ajax.post({
                        url : '/api/question/delete',
                        data : {id : questionId},
                        success : (response) =>
                        {
                            var data = response.data;
                            if(!data.Error)
                            {
                                this.$Message.success('删除成功！');
                                this.loadData();
                            }
                            else
                            {
                                this.$Message.error(data.Message);
                            }
                        },
                        error : (error) =>
                        {
                            this.$Message.error('操作失败，请重试！');
                        }
                    });
                },
                /**
                 * 启用禁用
                 */
                setStatus(index)
                {
                    // 操作
                    let action;
                    var nextStatus;

                    var item = this.gridData[index];
                    console.log(index);

                    //如果当前用户状态为“启用”，则将改变为“禁用”,反之则改变为“启用”状态
                    if(item.Status == CourseStatus.ENABLED)
                    {
                        action = 'setdisable';
                        nextStatus = CourseStatus.DISABLED;
                    }
                    else
                    {
                        action = 'setenable';
                        nextStatus = CourseStatus.ENABLED;
                    }

                    Ajax.post({
                        url : `/api/question/${action}`,
                        data : {id : item.QuestionId},
                        success : (response) =>
                        {
                            var data = response.data;
                            if(!data.Error)
                            {
                                item.Status = nextStatus.toString('d');
                            }
                            else
                            {
                                this.$Message.error(data.Message);
                            }
                        },
                        error : (error) =>
                        {
                            this.$Message.error('操作失败，请重试！');
                        }
                    });
                }
            }
        });

    </script>
}