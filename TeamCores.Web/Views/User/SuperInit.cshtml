@{
	Layout = null;
}

<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width" />
	<title>初始化超级管理员</title>
	<link rel="stylesheet" type="text/css" href="http://unpkg.com/iview/dist/styles/iview.css" />
	<link href="~/css/Style.css?t=@DateTime.Now.Ticks" rel="stylesheet" type="text/css" />
	<link href="~/css/vueui.css?t=@DateTime.Now.Ticks" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="~/lib/vue/dist/vue.min.js"></script>
	<script src="http://unpkg.com/iview/dist/iview.min.js"></script>
	<script src="~/js/pattern.js"></script>
	<script type="text/javascript" src="~/lib/axios/dist/axios.min.js"></script>
	<script type="text/javascript" src="~/js/common.js"></script>
</head>
<body>

	<div id="content">
		<i-form ref="formValidate" :model="user" :rules="validateRules" :label-width="80">

			<Form-item class="w-48" label="用户名" prop="Username">
				<i-input v-model="user.Username" placeholder="请输入用户名"></i-input>
			</Form-item>

			<Form-item class="w-48" label="邮箱" prop="Email">
				<i-input v-model="user.Email" placeholder="请输入邮箱地址"></i-input>
			</Form-item>

			<Form-item class="w-48" label="手机号码" prop="Mobile">
				<i-input v-model="user.Mobile" placeholder="请输入手机号码"></i-input>
			</Form-item>

			<Form-item  class="w-48" label="密码" prop="Password">
				<i-input v-model="user.Password" placeholder="请设置用户密码"></i-input>
			</Form-item>

			<Form-item class="w-48" label="真实姓名" prop="Name">
				<i-input v-model="user.Name" placeholder="请输入真是姓名"></i-input>
			</Form-item>

			<Form-item class="w-48" label="头衔" prop="Title">
				<i-input v-model="user.Title" placeholder="请输入头衔"></i-input>
			</Form-item>

			<Form-item class="w-48 form-button">
				<i-button type="ghost" v-on:click="handleReset('formValidate')">重置</i-button>
				<i-button type="primary" v-on:click="handleSubmit('formValidate')" style="margin-left: 8px">提交</i-button>
			</Form-item>
		</i-form>
	</div>

	<script type="text/javascript">
		var vm = new Vue({
			el: '#content',
			data: {
				// 用户对象
				user: {
					Username: "super",
					Email: "super@admin.com",
					Mobile: "13812345678",
					Password: "123456",
					Name: "super",
					Title: "系统管理员"
				},
				// 验证规则
				validateRules: {
					Username:
					[
						{
							required: true,
							message: "用户名不能为空"
						}
					],
					Email: [
						{
							required: true,
							message: "邮箱不能为空"
						},
						{
							pattern: pattern["Text.User.Email"],
							message: "邮箱格式不正确!",
							transform(value) {
								if (value)
									return value.toString().trim();
								return value;
							}
						}
					],
					Mobile: [
						{
							required: true,
							message: "手机号码不能为空"
						},
						{
							pattern: pattern["Text.User.Phone"],
							message: "请输入正确的手机号码!",
							transform(value) {
								if (value)
									return value.toString().trim();
								return value;
							}
						}
					],
					Password: [
						{
							required: true,
							message: "密码不能为空"
						}
					],
					Name: [
						{
							required: true,
							message: "姓名不能为空"
						}
					],
					Title: [
						{
							required: true,
							message: "头衔不能为空"
						}
					]
				}
			},
			methods: {
                // 提交/保存
				handleSubmit(name) {
                    this.$refs[name].validate((valid) => {
						if (valid) {
							this.initSuper();
						}
                    });
                },
                // 重置
                handleReset(name) {
                    this.$refs[name].resetFields();
                },
				initSuper() {
					var _self = this;
                    Ajax.post({
						url: '/api/user/initsuper',
                        data: this.user,
						success: (response) => {
                            var data = response.data;
                            if (!data.Error) {
                                this.$Message.success("初始化超级用户成功!");
                                setTimeout(() => {
                                        location = "/home/login";
                                    },
                                    1000);
                            } else {
                                apiError.call(this,data.Code, data.Data);
                            }
                        },
                        error: (error) => {
                            apiError.call(this);
                        }
                    });
                },
                showError(error) {
                    console.log(error);
                    for (var key in error) {

                        var formItmes = this.$refs["formValidate"].$children;

                        if (key.indexOf("USERNAME") != -1) {
                            formItmes[0].validateMessage = error[key];
                            formItmes[0].validateState = "error";
                        } else if (key.indexOf("EMAIL") != -1) {
                            formItmes[1].validateMessage = error[key];
                            formItmes[1].validateState = "error";
                        } else if (key.indexOf("MOBILE") != -1) {
                            formItmes[2].validateMessage = error[key];
                            formItmes[2].validateState = "error";
                        }

                    }
                }
            }
        });
	</script>
</body>
</html>
