
@{
	ViewData["Title"] = "新增用户";
}
@section head_script
{
	<script src="~/js/pattern.js"></script>
}
<div class="content-body">
	<div style="padding:30px 0px 50px 0px;">
		<template>
			<Steps :current="step" size="small">
				<Step title="填写用户信息"></Step>
				<Step title="权限设置"></Step>
				<Step title="完成"></Step>
			</Steps>
		</template>
	</div>
	<i-form ref="formValidate" :model="user" :rules="validateRules" :label-width="80">
		<div :class="firstClass">
			<Form-item class="w-48" label="用户名" prop="Username">
				<i-input v-model="user.Username" placeholder="请输入用户名"></i-input>
			</Form-item>

			<Form-item class="w-48" label="邮箱" prop="Email">
				<i-input v-model="user.Email" placeholder="请输入邮箱地址"></i-input>
			</Form-item>

			<Form-item class="w-48" label="手机号码" prop="Mobile">
				<i-input v-model="user.Mobile" placeholder="请输入手机号码"></i-input>
			</Form-item>

			<Form-item class="w-48" label="密码" prop="Password">
				<i-input type="password" v-model="user.Password" placeholder="请设置用户密码"></i-input>
			</Form-item>

			<Form-item class="w-48" label="真实姓名" prop="Name">
				<i-input v-model="user.Name" placeholder="请输入真是姓名"></i-input>
			</Form-item>

			<Form-item class="w-48" label="头衔" prop="Title">
				<i-input v-model="user.Title" placeholder="请输入头衔"></i-input>
			</Form-item>

			<Form-item class="w-48 form-button">
				<i-button type="ghost" v-on:click="handleReset('formValidate')">重置</i-button>
				<i-button type="primary" v-on:click="nextStep" style="margin-left: 8px">下一步</i-button>
			</Form-item>
		</div>
		<div :class="secondClass">
			<template v-for="(auth,index) in permissions">
				<div style="margin-bottom:30px;">
					<div style="border-bottom: 1px solid #e9e9e9;padding-bottom:6px;margin-bottom:6px;">
						<Checkbox :indeterminate="auth.Result.indeterminate"
								  :value="auth.Result.checkAll"
								  v-on:click.prevent.native="handleCheckAll(index)">{{ auth.Module }}</Checkbox>
					</div>
					<Checkbox-group v-model="auth.Result.checkedData" v-on:on-change="checkAllGroupChange(index)">
						<Checkbox v-for="item in auth.Items" :label="item.Code">{{ item.Name}}</Checkbox>
					</Checkbox-group>
				</div>
			</template>
			<Form-item class="w-48 form-button">
				<i-button type="ghost" v-on:click="previousStep">上一步</i-button>
				<i-button type="primary" v-on:click="handleSubmit('formValidate')" style="margin-left: 8px">提交</i-button>
			</Form-item>
		</div>
		<div :class="lastClass">

		</div>
	</i-form>

</div>

@section title_actions{
	<i-button type="success" v-on:click="goBack('/user/index')">返回</i-button>
}

@section page_script{
	<script type="text/javascript">
		var vm = new Vue({
			el: '#content',
			data: {
				step: 0,
				permissions: [],	//所有权限集状态
				// 用户对象
				user: {
					Username: "",
					Email: "",
					Mobile: "",
					Password: "",
					Name: "",
					Title: "",
					Permissions: []
				},
				// 验证规则
				validateRules: {
					Username:
					[
						{
							required: true,
							message: "用户名不能为空"
						}
					],
					Email: [
						{
							required: true,
							message: "邮箱不能为空"
						},
						{
							pattern: pattern["Text.User.Email"],
							message: "邮箱格式不正确!",
							transform(value) {
								if (value)
									return value.toString().trim();
								return value;
							}
						}
					],
					Mobile: [
						{
							required: true,
							message: "手机号码不能为空"
						},
						{
							pattern: pattern["Text.User.Phone"],
							message: "请输入正确的手机号码!",
							transform(value) {
								if (value)
									return value.toString().trim();
								return value;
							}
						}
					],
					Password: [
						{
							required: true,
							message: "密码不能为空"
						}
					],
					Name: [
						{
							required: true,
							message: "姓名不能为空"
						}
					],
					Title: [
						{
							required: true,
							message: "头衔不能为空"
						}
					]
				}
			},
			computed: {
				//第一步 class
				firstClass() {
					return this.step == 0 ? '' : 'hidden no-show';
				},
				//第二步 class
				secondClass() {
					return this.step == 1 ? '' : 'hidden no-show';
				},
				//第三步/最后一步 class
				lastClass() {
					return this.step == 2 ? '' : 'hidden  no-show';
				},
			},
			watch: {
				//权限集状态
				permissions: {
					handler: function (newVal) {
						var data = [];
						newVal.forEach((item) => {
							var results = item.Result.checkedData;
							if (results && results.length > 0) {
								data = data.concat(results);
							}
						});
						this.user.Permissions = data;
					},
					deep: true
				}
			},
			methods: {
				// 获取所有权限
				getPermissions() {
					Ajax.get({
						url: '/api/user/permissions',
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								var codes = [];

								//默认初始化已选择的权限
								data.Data.forEach((item, index) => {
									var code = { 'indeterminate': false, 'checkAll': false, 'checkedData': [] };
									codes.push({
										Module: item.Module,
										Items: item.Items,
										Result: code
									});
								});
								this.permissions = codes;
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error('获取权限项失败！');
						}
					});
				},
				//全选
				handleCheckAll(idx) {
					var current = this.permissions[idx];
					if (current && current.Result.indeterminate) {
						current.Result.checkAll = false;
					} else {
						current.Result.checkAll = !current.Result.checkAll;
					}
					current.Result.indeterminate = false;

					if (current.Result.checkAll) {
						var data = [];
						current.Items.forEach((item) => {
							data.push(item.Code);
						});
						current.Result.checkedData = data;
					} else {
						current.Result.checkedData = [];
					}
				},
				//单个权限项选择
				checkAllGroupChange(idx) {
					var current = this.permissions[idx];

					var dataLen = current.Items.length;
					var resultLen = current.Result.checkedData.length;

					if (resultLen === dataLen) {
						current.Result.indeterminate = false;
						current.Result.checkAll = true;
					} else if (resultLen > 0) {
						current.Result.indeterminate = true;
						current.Result.checkAll = false;
					} else {
						current.Result.indeterminate = false;
						current.Result.checkAll = false;
					}
				},
				//上一步，跳到基础信息表单
				previousStep() {
					this.step -= 1;
				},
				//下一步，跳到权限设置表单
				nextStep() {
					this.step += 1;

					var hasValue = this.permissions != null && this.permissions.length > 0;

					if (!hasValue) {
						this.getPermissions();
					}
				},
                // 提交/保存
				handleSubmit(name) {
                    this.$refs[name].validate((valid) => {
						if (valid) {
							this.addUser();	
						} else {
							this.step = 0;
						}
                    });
                },
                // 重置
                handleReset(name) {
                    this.$refs[name].resetFields();
				},
				//添加用户
				addUser() {
                    Ajax.post({
                        url: '/api/user/add',
                        data: this.user,
                        success: (response) => {
                            var data = response.data;
                            if (!data.Error) {
								this.$Message.success("添加成功!");
								window.goTo("/user/index", 3000);
                            } else {
                                this.$Message.error(data.Message);
							}
                        },
                        error: (error) => {
                            this.$Message.error('添加用户失败，请重试！');
                        }
                    });
                },
                showError(error) {
                    console.log(error);
                    for (var key in error) {

                        var formItmes = this.$refs["formValidate"].$children;

                        if (key.indexOf("USERNAME") != -1) {
                            formItmes[0].validateMessage = error[key];
                            formItmes[0].validateState = "error";
                        } else if (key.indexOf("EMAIL") != -1) {
                            formItmes[1].validateMessage = error[key];
                            formItmes[1].validateState = "error";
                        } else if (key.indexOf("MOBILE") != -1) {
                            formItmes[2].validateMessage = error[key];
                            formItmes[2].validateState = "error";
                        }

                    }
                }
            }
        });
	</script>
}