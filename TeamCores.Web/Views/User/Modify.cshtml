
@{
    ViewData["Title"] = "修改资料";
}

@section head_script
{
    <script src="~/js/pattern.js"></script>
}

<div class="content-body">
    <i-form :ref="formRef" :model="user" :rules="validateRules" :label-width="80">
        <Form-item class="w-48" label="用户名" prop="Username">
            <i-input v-model="user.Username" placeholder="请输入用户名"></i-input>
        </Form-item>

        <Form-item class="w-48" label="邮箱" prop="Email">
            <i-input v-model="user.Email" placeholder="请输入邮箱地址"></i-input>
        </Form-item>

        <Form-item class="w-48" label="手机号码" prop="Mobile">
            <i-input v-model="user.Mobile" placeholder="请输入手机号码"></i-input>
        </Form-item>

        <Form-item class="w-48" label="真实姓名" prop="Name">
            <i-input v-model="user.Name" placeholder="请输入真是姓名"></i-input>
        </Form-item>

        <Form-item class="w-48" label="头衔" prop="Title">
            <i-input v-model="user.Title" placeholder="请输入头衔"></i-input>
        </Form-item>

        <Form-item class="w-48 form-button">
            <i-button type="primary" v-on:click="formSubmit">提交</i-button>
			<i-button v-on:click="goBack('/')" style="margin-left: 8px">取消</i-button>
        </Form-item>
    </i-form>

</div>

@section page_script{
    <script type="text/javascript">
		var vm = new Vue({
            el: '#content',
			data: {
                formRef: 'modifyself_form',
				// 用户对象
				user: {
                    UserId: 0,
                    Username: "",
					Email: "",
					Mobile: "",
					Name: "",
					Title: ""
				},
				// 验证规则
                validateRules: {
                    Username:
                    [
                        {
                            required: true,
                            message: "用户名不能为空"
                        }
                    ],
					Email: [
						{
							required: true,
							message: "邮箱不能为空"
						},
						{
							pattern: pattern["Text.User.Email"],
							message: "邮箱格式不正确!",
							transform(value) {
								if (value)
									return value.toString().trim();
								return value;
							}
						}
					],
					Mobile: [
						{
							required: true,
							message: "手机号码不能为空"
						},
						{
							pattern: pattern["Text.User.Phone"],
							message: "请输入正确的手机号码!",
							transform(value) {
								if (value)
									return value.toString().trim();
								return value;
							}
						}
					],
					Name: [
						{
							required: true,
							message: "姓名不能为空"
						}
					],
					Title: [
						{
							required: true,
							message: "头衔不能为空"
						}
					]
				}
			},
			mounted() {
				// 编辑时先获取用户信息
				this.getUser();
			},
			methods: {
                // 获取用户信息
                getUser() {
                    Ajax.get({
						url: "/api/user/me",
                        success: (response) => {
							var data = response.data;
                            
							if (!data.Error) {
								this.user = {
									UserId: data.Data.UserId,
									Username: data.Data.Username,
									Email: data.Data.Email,
									Mobile: data.Data.Mobile,
									Name: data.Data.Name,
									Title: data.Data.Title
								};
                            } else {
                                apiError.call(this, data.Code, data.Data);
                            }
                        },
                        error: (error) => {
                            apiError.call(this);
                        }
                    });
				},
                // 提交/保存
                formSubmit() {
                    this.$refs[this.formRef].validate((valid) => {
						if (valid) {
							this.editUser();
						}
                    });
                },
                // 编辑用户
				editUser() {
                    Ajax.post({
						url: '/api/user/modifyself',
                        data: this.user,
                        success: (response) => {
                            var data = response.data;
                            if (!data.Error) {
								this.$Message.success("修改成功!");
                            } else {
                                apiError.call(this, data.Code, data.Data);
                            }
                        },
                        error: (error) => {
                            apiError.call(this);
                        }
                    });
                }
            }
        });
    </script>
}