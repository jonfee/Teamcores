@{
	ViewData["Title"] = "用户管理";
}
<!-- demo root element -->
<div id="user_list">
	<div class="searcher">
		<span>
			关键词：
			<i-input v-model="queries.keyword" placeholder="用户名/姓名/头衔/邮箱/手机号等..." style="width: 250px"></i-input>
		</span>
		<span>
			状态：
			<i-select v-model="queries.status" style="width: 100px">
				<i-option value="" key="">全部</i-option>
				<i-option v-for="item in userStatus" :value="item.value" :key="item.value">{{ item.text }}</i-option>
			</i-select>
		</span>
		<span>
			<i-button type="primary" icon="ios-search" v-on:click="search">搜索</i-button>
		</span>
	</div>
	<i-table :columns="gridColumns" :data="gridData"></i-table>
	<Page class-name="pager" :total="queries.total" :current="queries.p" :page-size="queries.size" show-total></Page>

	<template>
		<Modal v-model="resetPwdModel"
			   title="重置登录密码"
			   ok-text="确定"
			   cancel-text="取消"
			   v-on:on-ok="resetPwd"
			   width="360px">
			<i-form :label-width="80">
				<Form-item label="邮箱">
					{{ resetPwdData.email }}
				</Form-item>
				<Form-item label="用户名">
					{{ resetPwdData.userName }}
				</Form-item>
				<Form-item label="新密码">
					<i-input v-model="resetPwdData.newPwd" placeholder="请输入新密码"></i-input>
				</Form-item>
			</i-form>
		</Modal>
	</template>
</div>

@section title_actions{
	<i-button type="success" v-on:click="goBakc('/user/add')">新增</i-button>
}

@section page_script{
	<script>
		var vm = new Vue({
			el: '#content',
			data: {
				queries: {},
				resetPwdModel: false,
				resetPwdData: {
					userId: 0,
					userName: '',
					email: '',
					newPwd: '666666'
				},
				userStatus: UserStatus.items,
				gridColumns: [
					{
						key: 'Username',
						title: '用户名',
						render(h, params) {
							return h('p',
								[
									h('span', { style: { color: 'blue', fontWeight: 'bold' } }, params.row.Username),
									h('br'),
									h('span', { style: { color: 'black' } }, params.row.Name),
									h('br'),
									h('span', { style: { color: 'gray' } }, params.row.Title)
								]);
						}
					},
					{ key: 'Email', title: '邮箱' },
					{ key: 'Mobile', title: '手机号' },
					{
						key: 'Status',
						title: '状态',
						render(h, params) {
							return UserStatus.getItem(params.row.Status);
						}
					},
					{ key: 'LoginCount', title: '登录次数' },
					{
						key: 'LastTime',
						title: '最后登录时间',
						render(h, params) {
							return new Date(Date.parse(params.row.LastTime)).format('yyyy-MM-dd hh:mm:ss');
						}
					},
					{
						key: 'actions',
						title: '操作',
						width: 200,
						render(h, params) {
							var isSuper = params.row.IsSuper;
							if (isSuper) return;
							return h('p',
								[
									h('i-button',
										{
											props: {
												type: 'primary',
												size: 'small'
											},
											style: {
												marginRight: '5px'
											},
											on: {
												click: () => {
													vm.goEdit(params.index);
												}
											}
										},
										'编辑'),
									h('i-button',
										{
											props: {
												type: 'error',
												size: 'small'
											},
											style: {
												marginRight: '5px'
											},
											on: {
												click: () => {
													vm.setStatus(params.index);
												}
											}
										},
										vm.getStatusActionName(params.index)),
									h('i-button',
										{
											props: {
												type: 'error',
												size: 'small'
											},
											on: {
												click: () => {
													vm.alterResetPwdModel(params.index);
												}
											}
										}, '重置密码')
								]);
						}
					}
				],
				gridData: []
			},
			created: function () {
				this.loadQueries();
				this.loadData();
			},
			methods: {
                /**
				 * 加载筛选条件
				 */
				loadQueries() {
					let pageIndex,
						status;

					pageIndex =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["p"] + "'"));
					pageIndex = isNaN(pageIndex) ? 1 : Number(pageIndex);
					if (pageIndex < 1) pageIndex = 1;

					status =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["status"] + "'"));
					if (status != "" && !isNaN(status)) status = Number(status);

					this.queries["p"] = pageIndex;
					this.queries["size"] = 15;
					this.queries["keyword"] = @(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["keyword"] + "'"));
					this.queries["status"] = status;
				},
				/**
				 * 分页页码改变回调事件
				 * @@param {number} current 当前页码
				 */
				pagerChanged(current) {
					this.queries["p"] = current;
					reload.call(this);
				},
				/**
                 * 搜索
                */
				search() {
					this.queries["p"] = 1;
					this.queries["total"] = 0;
					reload.call(this);
				},
                /**
                 * 加载数据，会自动从queries中解析搜索的参数
                 */
				loadData() {
					var postData = {
						keyword: this.queries.keyword,
						status: this.queries.status,
						pageindex: this.queries.p,
						pagesize: this.queries.size
					};

					Ajax.post({
						url: "/api/user/search",
						data: postData,
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								var pager = data.Data;
								this.gridData = pager.Table;

								this.queries["total"] = pager.Count;
                            } else {
                                apiError.call(this, data.Code, data.Data);
                            }
                        },
                        error: (error) => {
                            apiError.call(this);
                        }
					});
				},
                /**
                 * 获取当前数据项的状态操作名称
                 * @@param {int} index 数据项在数组中的索引
                 */
				getStatusActionName(index) {
					var actionName = '';

					var status = this.gridData[index].Status;
					if (UserStatus.ENABLED == status) {
						actionName = '禁用';
					} else if (UserStatus.DISABLED == status) {
						actionName = '启用';
					}

					return actionName;
				},
                /**
                 * 根据数据项所在索引跳转到编辑页
                 * @@param index 数据项在数组中的索引
                 */
				goEdit(index) {
					var userId = this.gridData[index].UserId;
					location = '/user/edit/' + userId;
				},
                /**
                 * 根据数据项所在索引设置对应的相反状态
                 * @@param  {int} index 数据项在数组中的索引
                 */
				setStatus(index) {
					var item = this.gridData[index];
					//操作
					var action, nextStatus;

					//如果当前用户状态为“启用”，则将改变为“禁用”,反之则改变为“启用”状态
					if (item.Status == UserStatus.ENABLED) {
						action = 'setdisabled';
						nextStatus = UserStatus.DISABLED;
					} else {
						action = 'setenabled';
						nextStatus = UserStatus.ENABLED;
					}

					Ajax.post({
						url: '/api/user/' + action,
						data: { userId: item.UserId },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								item.Status = nextStatus.toString('d');
                            } else {
                                apiError.call(this, data.Code, data.Data);
                            }
                        },
                        error: (error) => {
                            apiError.call(this);
                        }
					});
				},
				/**
				* 重置用户登录密码按钮事件
				*
				* @@param {int} index 数据项在数组中的索引
				*/
				alterResetPwdModel(index) {
					var item = this.gridData[index];
					this.resetPwdData['userId'] = item.UserId;
					this.resetPwdData['userName'] = item.Username;
					this.resetPwdData['email'] = item.Email;
					this.resetPwdModel = true;
				},
				/**
				 * 重置用户登录密码
				 */
				resetPwd() {
					Ajax.post({
						url: '/api/user/resetpwd',
						data: { userId: this.resetPwdData.userId, newWord: this.resetPwdData.newPwd },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								this.$Message.success('密码重置成功！');
                            } else {
                                apiError.call(this, data.Code, data.Data);
                            }
                        },
                        error: (error) => {
                            apiError.call(this);
                        }
					});
				}
			}
		});

	</script>
}