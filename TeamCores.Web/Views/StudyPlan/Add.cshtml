@{
	ViewData["Title"] = "添加学习计划";
}

<div class="content-body">
	<div style="padding:30px 0px 50px 0px;">
		<template>
			<Steps :current="step.current" size="small">
				<Step v-for="item in step.configs" :title="item"></Step>
			</Steps>
		</template>
	</div>
	<i-form :ref="ruleForm" :model="plan" :rules="validateRules" :label-width="80">
		<div :class="planClass">
			<Form-item class="w-48" label="标题" prop="Title">
				<i-input v-model="plan.Title" placeholder="请输入学习计划标题"></i-input>
			</Form-item>
			<Form-item class="w-48" label="描述" prop="Content">
				<i-input v-model="plan.Content" type="textarea" :autosize="{minRows: 10,maxRows: 15}" placeholder="请输入学习计划的内容描述..."></i-input>
			</Form-item>
			<Form-item class="w-48 form-button">
				<i-button type="primary" v-on:click="planToNext" style="margin-left: 8px">下一步</i-button>
			</Form-item>
		</div>
		<div :class="courseClass">
			<Form-item class="w-48 form-button" label="关联课程" prop="Courses">
				<Checkbox-group v-model="plan.Courses">
					<Checkbox v-for="course in coursesData" :label="course.Id">{{ course.Name }}</Checkbox>
				</Checkbox-group>
			</Form-item>
			<Form-item class="w-48 form-button">
				<i-button type="ghost" v-on:click="previousStep">上一步</i-button>
				<i-button type="primary" v-on:click="courseToNext" style="margin-left: 8px">下一步</i-button>
			</Form-item>
		</div>
		<div :class="studentClass">
			<Form-item class="w-48 form-button" label="选择学员" prop="Students">
				<Checkbox-group v-model="plan.Students">
					<Checkbox v-for="student in studentsData" :label="student.UserId">{{ student.Name }}</Checkbox>
				</Checkbox-group>
			</Form-item>
			<i-button type="ghost" v-on:click="previousStep">上一步</i-button>
			<i-button type="primary" v-on:click="handleSubmit" style="margin-left: 8px">提交</i-button>
		</div>
		<div :class="doneClass">

		</div>
	</i-form>

</div>

@section title_actions{
	<i-button type="success" v-on:click="goBack('/studyplan/index')">返回</i-button>
}

@section page_script{
	<script type="text/javascript">
		var vm = new Vue({
			el: '#content',
			data: {
				ruleForm: 'ruleForm',
				//课程数据
				coursesData: [],
				//学员数据
				studentsData: [],
				//学习计划新增模型
				plan: {
					Title: '',
					Content: '',
					Courses: [],
					Students: []
				},
				//添加流程步骤
				step: {
					configs: ['填写计划内容', '关联课程', '指定学员', '完成'],
					current: 0
				},
				// 验证规则
				validateRules: {
					Title:
					[
						{
							required: true,
							message: "学习计划标题不能为空"
						}
					],
					Content:
					[
						{
							required: true,
							message: "学习计划内容描述不能为空"
						}
					],
					Courses: [
						{
							required: true,
							type: 'array',
							min: 1,
							message: '至少关联一门课程'
						}
					],
					Students: [
						{
							required: true,
							type: 'array',
							min: 1,
							message: '请选择学习计划针对的学员'
						}
					]
				}
			},
			computed: {
				/**
				 * 第一步：计划内容表单块样式
				 */
				planClass() {
					return this.getStepClass(0);
				},
				/**
				 *  第二步：关联课程表单块样式
				 */
				courseClass() {
					return this.getStepClass(1);
				},
				/**
				 * 关联学员表单块样式
				 */
				studentClass() {
					return this.getStepClass(2);
				},
				/**
				 * 完成块表单样式
				 */
				doneClass() {
					return this.getStepClass(3);
				}
			},
			methods: {
				/**
				 * 获取所有可用的课程
				 */
				getCourses() {

					if (this.coursesData.length > 0) return;

					var status = CourseStatus.ENABLED.toString("d");

					Ajax.get({
						url: '/api/course/listforstatus',
						data: { status: status },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								this.coursesData = data.Data;
								if (this.coursesData.length < 1) {
									this.$Message.error('没有可用的课程信息。');
								}
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error('获取课程数据失败，请重试！');
						}
					});
				},
				/**
				 *  获取所有有效的学员
				 */
				getStudents() {
					if (this.studentsData.length > 0) return;

					var status = UserStatus.ENABLED.toString("d");

					Ajax.get({
						url: '/api/user/listforstatus',
						data: { status: status },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								this.studentsData = data.Data;
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error('获取学员数据失败，请重试！');
						}
					});
				},
				/**
				 * 获取当前步骤的样式名
				 * @@param {Number} index 当前步骤的索引号，如：第一步为0,第二步为1
				 */
				getStepClass(index) {
					return this.step.current == index ? '' : 'hidden no-show';
				},
				/**
				 * 上一步
				 */
				previousStep() {
					if (this.step.current > 0)
						this.step.current -= 1;
				},
				/**
				 * 下一步
				 */
				nextStep() {
					var max = this.step.configs.length;
					if (this.step.current < max) {
						this.step.current += 1;
					}
				},
				/**
				 * 计划填写完基本信息后的下一步操作事件
				 */
				planToNext() {
					//本步骤需要检测的属性项
					var fields = ['Title', 'Content'];

					var success = this.validatePartOfFields(fields);

					//无错误，继续下一步
					if (success) {
						//获取课程数据
						this.getCourses();
						this.nextStep();
					}
				},
				/**
				 * 课程选择完成后的下一步操作事件
				 */
				courseToNext() {
					//本步骤需要检测的属性项
					var fields = ['Courses'];

					var success = this.validatePartOfFields(fields);

					//无错误，继续下一步
					if (success) {
						//获取学员数据
						this.getStudents();
						this.nextStep();
					}
				},
				/**
				 * 校验部分属性，并返回是否验证通过
				 * @@param {Array} fields 要检测的属性名称集合（数组）s
				 * @@returns Boolean
				 */
				validatePartOfFields(fields) {
					//是否存在错误
					var hasError = false;

					fields.forEach((item) => {
						this.$refs[this.ruleForm].validateField(item, (error) => {
							if (error && error !== '') {
								hasError = true;
							}
						});
					});

					return !hasError;
				},
				/**
				 * 提交/保存
				 */
				handleSubmit() {
                    this.$refs[this.ruleForm].validate((valid) => {
						if (valid) {
							//调用接口保存学习计划
							this.addStudyPlan();
						} else {
							this.$Message.error('输入项有误！');
						}
					});
				},
				/**
				 * 调用接口保存学习计划
				 */
				addStudyPlan() {
					Ajax.post({
						url: '/api/studyplan/add',
						data: this.plan,
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								this.$Message.success("添加成功!");
								window.goTo("/studyplan/index", 3000);
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error('添加计划失败，请重试！');
						}
					});
				}
			}
		});
	</script>
}

