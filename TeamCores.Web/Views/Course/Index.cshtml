@{
	ViewData["Title"] = "课程管理";
}
<!-- demo root element -->
<div id="course_list">
	<div class="searcher">
		<span>
			关键字：
			<i-input v-model="queries.keyword" placeholder="课程名称" style="width: 250px"></i-input>
		</span>
		<span>
			科目：
			<i-select v-model="queries.subjectId" style="width: 100px">
				<i-option value="" key="">全部</i-option>
				<i-option v-for="item in subjects" :value="item.SubjectId" :key="item.SubjectId">{{item.Name}}</i-option>
			</i-select>
		</span>
		<span>
			状态：
			<i-select v-model="queries.status" style="width: 100px">
				<i-option value="" key="">全部</i-option>
				<i-option v-for="item in courseStatus" :value="item.value" :key="item.value">{{ item.text }}</i-option>
			</i-select>
		</span>
		<span>
			<i-button type="primary" icon="ios-search" v-on:click="search">搜索</i-button>
		</span>
	</div>
	<i-table :columns="gridColumns" :data="gridData"></i-table>
	<Page class-name="pager" :total="queries.total" :current="queries.p" :page-size="queries.size" v-on:on-change="pagerChanged" show-total>
	</Page>
</div>
@section title_actions{
	<i-button type="success" v-on:click="goTo('/course/add')">新增</i-button>
}
@section page_script{
	<script>
		var vm = new Vue({
			el: '#content',
			data: {
				queries: {},
				subjects: {},
				courseStatus: CourseStatus.items,
				gridColumns: [
					{
						key: 'Title',
						title: '课程标题'
					},
					{
						key: 'SubjectId',
						title: '所属科目',
						render(h, params) {
							return vm.findSubjectName(params.row.SubjectId);
						}
					},
					{
						key: 'Remarks',
						title: '摘要'
					},
					{
						key: 'Status',
						title: '状态',
						render(h, params) {
							return CourseStatus.getItem(params.row.Status);
						}
					},
					{
						key: 'CreateTime',
						title: '创建时间',
						render(h, params) {
							return new Date(Date.parse(params.row.CreateTime)).format('yyyy-MM-dd hh:mm:ss');
						}
					},
					{
						key: 'actions',
						title: '操作',
						width: 250,
						render(h, params) {
							return h('p',
								[
									h('i-button',
										{
											props: {
												type: 'primary',
												size: 'small'
											},
											style: {
												marginRight: '5px'
											},
											on: {
												click: () => {
													vm.goDetails(params.row);
												}
											}
										},
										'查看'),
									h('i-button',
										{
											props: {
												type: 'primary',
												size: 'small'
											},
											style: {
												marginRight: '5px'
											},
											on: {
												click: () => {
													vm.goEdit(params.row);
												}
											}
										},
										'编辑'),
									h('i-button',
										{
											props: {
												type: 'warning',
												size: 'small'
											},
											style: {
												marginRight: '5px'
											},
											on: {
												click: () => {
													vm.setStatus(params.index);
												}
											}
										},
										params.row.Status == CourseStatus.ENABLED.value
											? CourseStatus.DISABLED.text
											: CourseStatus.ENABLED.text),
									h('i-button',
										{
											props: {
												type: 'error',
												size: 'small'
											},
											on: {
												click: () => {
													vm.onDelte(params.row.CourseId);
												}
											}
										},
										'删除')
								]);
						}
					}
				],
				gridData: []
			},
			created: function () {
				this.loadQueries();
				this.loadSubjects();
				this.loadData();
			},
			methods:
			{
				/**
				 * 加载筛选条件
				 */
				loadQueries() {
					let pageIndex,
						status;

					pageIndex =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["p"] + "'"));
					pageIndex = isNaN(pageIndex) ? 1 : Number(pageIndex);
					if (pageIndex < 1) pageIndex = 1;

					status =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["status"] + "'"));
					if (status != "" && !isNaN(status)) status = Number(status);					

					this.queries["p"] = pageIndex;
					this.queries["size"] = 15;
					this.queries["keyword"] = @(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["keyword"] + "'"));
					this.queries["subject"] = @(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["subject"] + "'"));
					this.queries["status"] = status;
				},
				/**
				 * 分页页码改变回调事件
				 * @@param {number} current 当前页码
				 */
				pagerChanged(current) {
					this.queries["p"] = current;
					reload.call(this);
				},
				/**
                 * 搜索
                */
				search() {
					this.queries["p"] = 1;
					this.queries["total"] = 0;
					reload.call(this);
				},
                /**
                 * 获取所有的科目
                */
				loadSubjects() {
					Ajax.post({
						url: "/api/subjects/search",
						data: {
							pageIndex: 1,
							pageSize: 100
						},
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								const pager = data.Data;
								this.subjects = pager.Table;
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error("加载科目数据失败，请重试！");
						}
					});
				},
                /**
                 * 根据科目Id获取科目名称
                 */
				findSubjectName(subjectId) {
					const find = this.subjects &&
						this.subjects.length > 0 &&
						this.subjects.find((item) => {
							return item.SubjectId == subjectId;
						});
					return find && find.Name;
				},

                /**
                 * 加载数据，会自动从searchQuery中解析搜索的参数
                 */
				loadData() {
					const postData = {
						keyword: this.queries.keyword,
						status: this.queries.status,
						subjectId: this.queries.subject,
						pageindex: this.queries.p,
						pagesize: this.queries.size
					};

					Ajax.post({
						url: "/api/course/search",
						data: postData,
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								const pager = data.Data;
								this.gridData = pager.Table;

								this.queries["total"] = pager.Count;
							} else {
								apiError(data.Code, data.Message);
							}
						},
						error: (error) => {
							apiError(null, "加载数据失败，请重试！");
						}
					});
				},
				/**
				 * 跳转到课程详情页
				 * @@param item 选中的课程
				 */
				goDetails(item) {
					const courseId = item.CourseId;
					location = `/course/details/${courseId}`;
				},
                /**
                 * 跳转到编辑页面
                 * @@param item 选中的课程
                 */
				goEdit(item) {
					const courseId = item.CourseId;
					location = `/course/edit/${courseId}`;
				},
                /**
                 * 启用禁用
                 */
				setStatus(index) {
					// 操作
					let action;
					var nextStatus;

					var item = this.gridData[index];

					//如果当前用户状态为“启用”，则将改变为“禁用”,反之则改变为“启用”状态
					if (item.Status == CourseStatus.ENABLED) {
						action = 'setdisable';
						nextStatus = CourseStatus.DISABLED;
					} else {
						action = 'setenable';
						nextStatus = CourseStatus.ENABLED;
					}

					Ajax.post({
						url: `/api/course/${action}`,
						data: { id: item.CourseId },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								item.Status = nextStatus.toString('d');
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error('操作失败，请重试！');
						}
					});
				},

                /**
                 * 删除点击事件
                 * @@param courseId 考题Id
                 */
				onDelte(courseId) {
					this.$Modal.confirm({
						title: '系统提示',
						content: '确认要删除该课程吗?',
						onOk: () => {
							this.deleteCourse(courseId);
						},
						onCancel: () => {
						}
					});
				},

                /**
                 * 删除
                 * @@param courseId
                 */
				deleteCourse(courseId) {
					Ajax.post({
						url: '/api/course/delete',
						data: { id: courseId },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								this.$Message.success('删除成功！');
								this.loadData();
							} else
								this.$Message.error(data.Message)
						},
						error: (error) => {
							this.$Message.error('操作失败，请重试！');
						}
					});
				},
			}
		});

	</script>
}