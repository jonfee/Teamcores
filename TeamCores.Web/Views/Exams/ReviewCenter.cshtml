
@{
	ViewData["Title"] = "阅卷中心";
	ViewData["HideTitleBar"] = true;
}

<template>
	<Tabs :value="queries.tab" type="card" :animated="false" v-on:on-click="statusTabChange">
		<Tab-pane v-for="tab in tabs" :label="tab.label" :name="tab.name"></Tab-pane>
	</Tabs>
	<i-table :columns="gridColumns" :data="gridData"></i-table>
	<Page class-name="pager" :total="queries.total" :current="queries.p" :page-size="queries.size" v-on:on-change="pagerChanged" show-total>
	</Page>
</template>

@section page_script{
	<script>
		var vm = new Vue({
			el: "#content",
			data: {
				queries: {},
				tabs: [
					{ label: "待阅卷", name: ExamMarkingStatus.DIDNOT_READ.toString("name") },
					{ label: "已阅卷", name: ExamMarkingStatus.READED.toString("name") }
				],
				gridColumns: [
					{
						key: 'ExamTitle',
						title: '标题',
						width: 250
					},
					{
						key: 'ExamType',
						title: '类型',
						render(h, params) {
							return ExamType.getItem(params.row.ExamType);
						}
					},
					{
						key: 'UserName',
						title: '考生'
					},
					{
						key: 'CreateTime',
						title: '考试时间',
						width: 100,
						render(h, params) {
							return new Date(Date.parse(params.row.CreateTime)).format('yyyy-MM-dd hh:mm:ss');
						}
					},
					{
						key: 'PostTime',
						title: '交卷时间',
						width: 100,
						render(h, params) {
							var dt = params.row.PostTime || '';
							if (dt == null) dt = '';
							if (dt == '') {
								return '尚未交卷';
							} else {
								return new Date(Date.parse(dt)).format('yyyy-MM-dd hh:mm:ss');
							}
						}
					},
					{
						key: 'Total',
						title: '总分'
					},
					{
						key: 'Score',
						title: '得分',
						render(h, params) {
							var score = params.row.Score
							//未阅卷
							if (params.row.MarkingStatus == ExamMarkingStatus.DIDNOT_READ) {
								return "--";
							} else {
								var color = score < params.row.Pass ? "red" : "green";
								return h("span", {
									style: {
										color: color,
										fontWeight: "bold"
									}
								},
									score);
							}
						}
					},
					{
						key: 'actions',
						title: '操作',
						width: 150,
						render(h, params) {
							let status = params.row.MarkingStatus,
								btnName,
								btnType = 'primary',
								btnDisabled = false,
								toUrl;

							if (status == ExamMarkingStatus.DIDNOT_READ) {
								var dt = params.row.PostTime || '';
								if (dt == null) dt = '';
								if (dt == '') {
									btnName = '等待交卷';
									btnDisabled = true;
									btnType = "";
								} else {
									btnName = "开始阅卷";
									toUrl = "/exams/review/" + params.row.UserExamId;
								}
							} else {
								btnName = "查看";
								toUrl = "/exams/testdetails/" + params.row.UserExamId;
							}

							return h('p',
								[
									h('i-button',
										{
											props: {
												type: btnType,
												disabled: btnDisabled,
												size: 'small'
											},
											on: {
												click: () => {
													location = toUrl;
												}
											}
										},
										btnName)
								]);
						}
					}
				],
				gridData: [
					{
						UserExamId: 0,
						UserId: 0,
						UserName: '',
						UserMobile: '',
						UserTitlle: '',
						ExamId: 0,
						ExamTitle: '',
						ExamType: 0,    //考卷类型
						MaxTime: 0,     //考试时间（单位：分钟）
						ActualTime: 0,  //实际答卷所花时间（单位：分钟）
						Total: 0,       //总分
						Pass: 0,        //及格分
						Score: 0,       //最后考试得分
						CreateTime: '', //考试时间
						PostTime: '',   //交卷时间
						MarkingStatus: 0,   //阅卷状态
						MarkingTime: '',    //阅卷时间
					}
				]
			},
			created() {
				this.loadQueries();

				this.loadUserExams();
			},
			methods: {
				/**
				 * 加载筛选条件
				 */
				loadQueries() {
					let pageIndex,
						tab;

					pageIndex =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["p"] + "'"));
					pageIndex = isNaN(pageIndex) ? 1 : Number(pageIndex);
					if (pageIndex < 1) pageIndex = 1;

					tab =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["tab"] + "'"));
					if (tab == "") tab = this.tabs[0].name;

					this.queries["p"] = pageIndex;
					this.queries["size"] = 15;
					this.queries["tab"] = tab;
				},
				/**
				 * 分页页码改变回调事件
				 * @@param {number} current 当前页码
				 */
				pagerChanged(current) {
					this.queries["p"] = current;
					this.reload();
				},
				/**
				 * 重新加载
				 */
				reload() {
					var url = buildUrl(location.href.toString(), this.queries);
					location.href = url;
				},
				/**
				 * 阅卷状态标签选择
				 * @@param {String} tabName 标签名称
				 */
				statusTabChange(tabName) {
					this.queries["tab"] = tabName;
					this.queries["p"] = 1;
					this.reload();
				},
				/**
				 * 加载用户考卷数据
				 */
				loadUserExams() {
					//当前需要加载考卷的阅卷状态值
					var status = ExamMarkingStatus.getItem(this.queries.tab).toString("d");

					Ajax.post({
						url: "/api/userexam/search",
						data: { pageindex: this.queries.p, pagesize: this.queries.size, status: status },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								var result = data.Data;
								this.gridData = result.Table;

								this.queries["total"] = result.Count;
							} else {
								apiError(data.Code);
							}
						},
						error: (error) => {
							this.$Message.error("加载数据失败，请重试");
						}
					});
				}
			}
		});
	</script>
}
