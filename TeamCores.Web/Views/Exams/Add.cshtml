
@{
	ViewData["Title"] = "新增考卷模板";
}

<div class="content-body">
	<div style="padding:30px 0px 50px 0px;">
		<template>
			<Steps :current="step.current" size="small">
				<Step v-for="item in step.configs" :title="item"></Step>
			</Steps>
		</template>
	</div>
	<div :class="baseClass">
		<i-form :ref="ruleForm.base" :model="exam" :rules="validateRules" :label-width="120">
			<Form-item class="w-48" label="考卷模板标题" prop="Title">
				<i-input v-model="exam.Title" placeholder="考卷模板标题"></i-input>
			</Form-item>
			<Form-item class="w-48" label="类型" prop="ExamType">
				<i-select v-model="exam.ExamType">
					<i-option v-for="item in ExamType.items" :value="item.value" :key="item.value">{{item.text}}</i-option>
				</i-select>
			</Form-item>
			<Form-item class="w-48" label="关联课程" prop="CourseIds">
				<Checkbox-Group v-model="exam.CourseIds" v-on:on-change="courseChangedEvent">
					<Checkbox v-for="item in courses" :label="item.Id">{{ item.Name}}</Checkbox>
				</Checkbox-Group>
			</Form-item>
			<Form-item class="w-48" label="考卷说明" prop="Remarks">
				<i-input type="textarea" v-model="exam.Remarks" placeholder="请输入考卷说明"></i-input>
			</Form-item>
			<Form-item class="w-48" label="有效期">
				<Date-Picker v-model="expiryTime" type="datetimerange" format="yyyy/MM/dd HH:mm" placeholder="选择日期和时间（不含秒）" style="width: 300px"></Date-Picker>
			</Form-item>
			<Form-item class="w-48" label="考试时间（分钟）" prop="Time">
				<i-input v-model="exam.Time" placeholder="请输入考试的时间（单位：分钟）"></i-input>
			</Form-item>
			<Form-item class="w-48 form-button">
				<i-button type="primary" v-on:click="baseFormToNext" style="margin-left: 8px">下一步</i-button>
			</Form-item>
		</i-form>
	</div>
	<div :class="questionClass">
		<i-form :ref="ruleForm.questions" :model="exam" :rules="validateRules" :label-width="120">
			<Tabs v-if="changedCourses.length > 0" type="card" :value="currentCourse" :animated="false" v-on:on-click="courseTabChangeEvent">
				<Tab-pane v-for="course in changedCourses" :label="course.Name" :name="course.Id">
					<i-table stripe height="500" :columns="questions.columns" :data="questions.data[course.Id]" v-on:on-selection-change="questionsChangeEvent"></i-table>
				</Tab-pane>
			</Tabs>
			<Form-item class="w-48 form-button" style="margin-top: 20px;">
				<i-button type="ghost" v-on:click="previousStep">上一步</i-button>
				<i-button type="primary" v-on:click="questionsFormToNext" style="margin-left: 8px">下一步</i-button>
			</Form-item>
		</i-form>
	</div>
	<div :class="scoreClass">
		<i-form :ref="ruleForm.score" :model="exam" :rules="validateRules" :label-width="120" inline>
			<Form-item class="w-30" label="单选题随机" prop="Radio">
				<i-input v-model="exam.Radio" placeholder="试卷中单选题所占数量"></i-input>
			</Form-item>
			<Form-item class="w-30" label="单选题总分" prop="RedioTotal">
				<i-input v-model="exam.RedioTotal" placeholder="试卷中单选题所占的总分值"></i-input>
			</Form-item>
			<br />
			<Form-item class="w-30" label="多选题随机" prop="Multiple">
				<i-input v-model="exam.Multiple" placeholder="试卷中多选题所占数量"></i-input>
			</Form-item>
			<Form-item class="w-30" label="多选题总分" prop="MultipleTotal">
				<i-input v-model="exam.MultipleTotal" placeholder="试卷中多选题所占的总分值"></i-input>
			</Form-item>
			<br />
			<Form-item class="w-30" label="判断题随机" prop="Judge">
				<i-input v-model="exam.Judge" placeholder="试卷中判断题所占数量"></i-input>
			</Form-item>
			<Form-item class="w-30" label="判断题总分" prop="JudgeTotal">
				<i-input v-model="exam.JudgeTotal" placeholder="试卷中判断题所占的总分值"></i-input>
			</Form-item>
			<br />
			<Form-item class="w-30" label="填空题随机" prop="Filling">
				<i-input v-model="exam.Filling" placeholder="试卷中填空题所占数量"></i-input>
			</Form-item>
			<Form-item class="w-30" label="填空题总分" prop="FillingTotal">
				<i-input v-model="exam.FillingTotal" placeholder="试卷中填空题所占总分值"></i-input>
			</Form-item>
			<br />
			<Form-item class="w-30" label="问答题随机" prop="Ask">
				<i-input v-model="exam.Ask" placeholder="试卷中问答题所占数量"></i-input>
			</Form-item>
			<Form-item class="w-30" label="问答题总分" prop="AskTotal">
				<i-input v-model="exam.AskTotal" placeholder="试卷中问答题所占总分值"></i-input>
			</Form-item>
			<br />
			<Form-item class="w-30" label="总题数">
				{{ totalQuestions }}
			</Form-item>
			<Form-item class="w-30" label="总分" prop="Total">
				<i-input v-model="exam.Total" placeholder="考卷总分" readonly="true"></i-input>
			</Form-item>
			<Form-item class="w-30" label="及格分" prop="Pass">
				<i-input v-model="exam.Pass" placeholder="及格分"></i-input>
			</Form-item>
			<br />
			<Form-item class="w-48 form-button">
				<i-button type="ghost" v-on:click="previousStep">上一步</i-button>
				<i-button type="primary" v-on:click="handleSubmit" style="margin-left: 8px">提交</i-button>
			</Form-item>
		</i-form>
	</div>
	<div :class="doneClass">

	</div>
</div>
@section title_actions{
	<i-button type="success" v-on:click="goBack('/exams/index')">返回</i-button>
}
@section page_script{
	<script src="~/js/pattern.js"></script>
	<script>
		var vm = new Vue({
			el: '#content',
			data: {
				ruleForm: {
					base: 'ruleForm_base',
					questions: 'ruleForm_questions',
					score: 'ruleForm_score'
				},
				//添加流程步骤
				step: {
					configs: ['填写基本信息', '设置题库', '题型数量及分值', '完成'],
					current: 0
				},
				//课程集合
				courses: [],
				//当前操作的题库课程标签
				currentCourse: 0,
				//已选择关联的课程
				changedCourses: [],
				//已选课程对应的题目
				questions: {
					columns: [
						{ type: 'selection', width: 60, align: 'center' },
						{ title: '题目', key: 'Topic' },
						{
							title: '类型', key: 'Type', render(h, params) {
								return QuestionType.getItem(params.row.Type);
							}
						}
					],
					//值
					data: {}
				},
				//考卷对象
				exam: {
					ExamType: 1,
					CourseIds: [],
					Title: "",
					Remarks: "",
					Questions: [],
					Time: 90,
					Total: 0,
					Pass: 0,
					Radio: 0,
					RedioTotal: 0,
					Multiple: 0,
					MultipleTotal: 0,
					Judge: 0,
					JudgeTotal: 0,
					Filling: 0,
					FillingTotal: 0,
					Ask: 0,
					AskTotal: 0,
					StartTime: '',
					EndTime: ''
				},
				// 验证规则
				validateRules: {
					Title:
					[
						{ required: true, message: '标题不能为空' },
						{ type: 'string', min: 1, max: 50, message: '最少1个或最多允许50个字' }
					],
					ExamType: [
						{
							required: true,
							message: '请选择考卷类型'
						}
					],
					CourseIds: [
						{
							required: true,
							type: 'array',
							min: 1,
							message: '请选择关联的课程'
						}
					],
					Remarks: [
						{ required: true, message: '考卷说明不能为空' },
						{ type: 'string', max: 500, message: '最多允许500个字' }
					],
					Time: [
						{ required: true, pattern: pattern["Text.Integer.Positive"], message: '考试时间不能小于1分钟' },
						{
							validator: (rule, value, callback) => {
								if (!value) {
									callback(new Error('考试时间不能为空'));
								} else if (isNaN(value)) {
									callback(new Error('请输入数字'));
								} else if (value < 5) {
									callback(new Error('考试时间不能小于5分钟'));
								} else {
									callback();
								}
							}
						}
					],
					Total: [
						{ required: true, pattern: pattern["Text.Integer.Positive"], message: '总分不能小于1' },
						{
							validator: (rule, value, callback) => {
								if (value) {
									if (isNaN(value)) {
										callback(new Error('请输入数字'));
									} else if (value < 1) {
										callback(new Error('总分不能小于1'));
									} else {
										callback();
									}
								} else {
									callback(new Error('总分必须填写'));
								}
							}
						}
					],
					Pass: [
						{ required: true, pattern: pattern["Text.Integer.Positive"], message: '及格分不能小于1' },
						{
							validator: (rule, value, callback) => {
								if (!value) {
									callback(new Error('及格分不能为空'));
								} else if (value > vm.exam.Total) {
									callback(new Error('及格分不能大于总分'));
								} else {
									callback();
								}
							}
						}
					],
					Radio: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					RedioTotal: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					Multiple: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					MultipleTotal: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					Judge: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					JudgeTotal: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					Filling: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					FillingTotal: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					Ask: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					],
					AskTotal: [
						{ required: true, pattern: pattern["Text.Integer"], message: '必须为≥0的正整数' }
					]
				}
			},
			computed: {
				/**
				* 有效期(数组)
				*/
				expiryTime: {
					get: function () {
						return [this.exam.StartTime, this.exam.EndTime];
					},
					set: function (newValue) {
						var times = newValue || ['', ''];
						this.exam.StartTime = times[0];
						this.exam.EndTime = times[1];
					}
				},
				/**
				 * 统计出的各题型题目之和
				 */
				totalQuestions() {
					return Number(this.exam.Radio)
						+ Number(this.exam.Multiple)
						+ Number(this.exam.Judge)
						+ Number(this.exam.Filling)
						+ Number(this.exam.Ask);
				},
				/**
				 * 统计出的各题型总分值之和
				 */
				totalScore() {
					return Number(this.exam.RedioTotal)
						+ Number(this.exam.MultipleTotal)
						+ Number(this.exam.JudgeTotal)
						+ Number(this.exam.FillingTotal)
						+ Number(this.exam.AskTotal);
				},
				/**
				 * 第一步： 基本信息表单组样式
				 */
				baseClass() {
					return this.getStepClass(0);
				},
				/**
				 * 第二步：题库表单组样式
				 */
				questionClass() {
					return this.getStepClass(1);
				},
				/**
				 * 第三步：考卷题型数及分值设置表单组样式
				 */
				scoreClass() {
					return this.getStepClass(2);
				},
				/**
				 * 第四步：完成
				 */
				doneClass() {
					return this.getStepClass(3);
				}
			},
			watch: {
				totalScore() {
					this.exam.Total = this.totalScore;
				}
			},
			created() {
				this.loadCourses();
			},
			methods: {
				/**
				 * 获取当前步骤的样式名
				 * @@param {Number} index 当前步骤的索引号，如：第一步为0,第二步为1
				 */
				getStepClass(index) {
					return this.step.current == index ? '' : 'hidden no-show';
				},

				/**********************数据加载相关方法***************************/

				/**
				 * 加载所有可用的课程
				 */
				loadCourses() {

					if (this.courses.length > 0) return;

					var status = CourseStatus.ENABLED.toString("d");

					Ajax.get({
						url: '/api/course/listforstatus',
						data: { status: status },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								this.courses = data.Data;
								if (this.courses.length < 1) {
									this.$Message.error('没有可用的课程信息。');
								}
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error('获取课程数据失败，请重试！');
						}
					});
				},

				/**
				 * 加载并处理已选择关联的课程题库标签
				 */
				loadQuestionTabs(selectedData) {

					//清空已选择的关联课程集合
					this.changedCourses = [];

					//处理已选择关联的课程
					this.exam.CourseIds.forEach((cid) => {
						var hasQuestions = this.hasQuestions(cid);
						if (hasQuestions) {
							this.addToChangedCourses(cid);
						} else {
							this.loadQuestions(cid, this.addToChangedCourses);
						}
					});
				},

				/**
				* 新增课程关联
				* @@param {long} courseId 需要新增关联的课程ID
				*/
				addToChangedCourses(courseId) {
					var course = this.courses.find((o) => {
						return o.Id == courseId;
					});

					if (course) {
						this.changedCourses.push(course);
					}
				},

				/**
				 * 加载课程下的题库
				 * @@param {string} courseId 课程ID
				 * @@param {function} callback 执行后的回调方法
				 */
				loadQuestions(courseId, callback) {
					var self = this;

					self.currentCourse = courseId;

					//检测当前课程在本地存储器中是否存在题库（注意：并非去数据库中查询）
					let hasData = self.hasQuestions(courseId);

					if (!hasData) {
						Ajax.get({
							url: '/api/question/datafor',
							params: { courseId: courseId, status: QuestionStatus.ENABLED.toString('d') },
							success: (response) => {
								var data = response.data;
								if (!data.Error) {
									let tempQuestions = [];
									data.Data.forEach((item) => {
										tempQuestions.push({
											QuestionId: item.QuestionId,
											Topic: item.Topic,
											Type: item.Type
										});
									});
									self.questions.data[courseId] = tempQuestions;
								} else {
									self.questions.data[courseId] = [];
								}

								doCallback();
							},
							error: (error) => {
								doCallback();
							}
						});
					}

					/**
					 * 执行回调
					 */
					function doCallback() {
						//执行回调
						if (callback && typeof (callback) === 'function') {
							callback.apply(self, [courseId]);
						}
					}
				},

				/***********************各操作事件***************/

				/**
				 * 检测指定的课程是否存在题库数据
				 * @@param {long} courseId 课程ID
				 */
				hasQuestions(courseId) {
					var ques = this.questions.data[courseId] || [];
					return ques != null && ques.length > 0;
				},

				/**
				 * 课程关联选择事件
				 * @@param {array} data 已选中的课程数据集合
				 */
				courseChangedEvent(data) {
					this.loadQuestionTabs();
				},

				/**
				 * 题库课程标签选择事件
				 * @@param {string} tabname 一般为课程ID
				 */
				courseTabChangeEvent(tabname) {
					this.currentCourse = tabname;
				},

				/**
				 * 题库选择事件
				 * @@param {array} data 已选中的题库数据集合
				 */
				questionsChangeEvent(data) {
					var strIds = '';
					if (this.exam.Questions.length > 0) {
						strIds = this.exam.Questions.join(',');
					}
					//找到当前课程下的题库，并暂时从原题库中移除
					var ques = this.questions.data[this.currentCourse].forEach((item) => {
						strIds = strIds.replace(item.QuestionId, '');
					});

					strIds = strIds.replace(/,+/, ',').replace(/(^,+)|(,+$)/, '');

					//得到除了当前课程下题目的所有选中题目集合
					let questions = [];
					if (strIds != '') {
						questions = strIds.split(',') || [];
					}

					//处理当前课程下选择的题目，并加入到考卷选中题库中
					data = data || [];
					if (data.length > 0) {
						data.forEach((item) => {
							if (item.QuestionId != '') {
								questions.push(item.QuestionId);
							}
						});
					}

					//赋值并更新到考卷题库数据中
					this.exam.Questions = questions;
				},

				/*****************上一步，下一步，提交表单等*********************/

				/**
				 * 上一步
				 */
				previousStep() {
					if (this.step.current > 0)
						this.step.current -= 1;
				},

				/**
				 * 下一步
				 */
				nextStep() {
					var max = this.step.configs.length;
					if (this.step.current < max) {
						this.step.current += 1;
					}
				},

				/**
				 * 第一步：基本信息下一步按钮事件
				 */
				baseFormToNext() {
					this.$refs[this.ruleForm.base].validate((valid) => {
						if (valid) {
							this.nextStep();
						}
					});
				},

				/**
				 * 第二步：选择题库后下一步按钮事件
				 */
				questionsFormToNext() {
					var success = this.exam.Questions.length > 0;

					if (success) {
						this.nextStep();
					} else {
						this.$Message.error('请选择考卷模板的题库');
					}
				},

                /**
                 * 第三步：设置考卷各题型数量和分值，并保存
                 * @@param name 表单名称
                 */
				handleSubmit() {
					this.$refs[this.ruleForm.score].validate((valid) => {
						if (valid) {

							//自定义验证设置的总分是否与各题型总分值匹配
							if (this.totalScore != this.exam.Total) {
								this.$Message.error('考卷题目的总分与设置的考卷总分不一致');
							} else {
								Ajax.post({
									url: '/api/exams/add',
									data: this.exam,
									success: (response) => {
										var data = response.data;
										if (!data.Error) {
											this.$Message.success("添加成功!");
											window.goTo("/exams/index", 3000);
										} else {
											this.$Message.error(data.Message);
										}
									},
									error: (error) => {
										this.$Message.error('操作失败，请重试！');
									}
								});
							}
						}
					});
				}
			}
		});
	</script>
}

