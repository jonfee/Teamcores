
@{
    ViewData["Title"] = "我的练习/考试";
}

<div>
    <div class="searcher">
        <span>
            状态：
            <i-select v-model="queries.status" style="width: 100px">
                <i-option value="" key="">全部</i-option>
                <i-option v-for="item in ExamMarkingStatus.items" :value="item.value" :key="item.value">{{item.text}}</i-option>
            </i-select>
        </span>
        <span>
            <i-button type="primary" icon="ios-search" v-on:click="search">搜索</i-button>
        </span>
    </div>
    <i-table :columns="gridColumns" :data="gridData"></i-table>
    <Page class-name="pager" :total="queries.total" :current="queries.p" :page-size="queries.size" v-on:on-change="pagerChanged" show-total>
    </Page>
</div>

@section title_actions{
    <i-button type="success" v-on:click="goTo('/exams/testlist')">考卷中心</i-button>
}
@section page_script{
    <script>
        var vm = new Vue({
            el: '#content',
			data: {
				queries: {},
                courses: {},
                gridColumns: [
                    {
                        key: 'ExamTitle',
                        title: '标题',
                        width: 250
                    },
                    {
                        key: 'ExamType',
                        title: '类型',
                        render(h, params) {
                            return ExamType.getItem(params.row.ExamType);
                        }
                    },
                    {
                        key: 'Total',
                        title: '总分'
                    },
                    {
                        key: 'Pass',
                        title: '及格分'
                    },
                    {
                        key: 'CreateTime',
                        title: '考试时间',
                        width: 100,
                        render(h, params) {
                            return new Date(Date.parse(params.row.CreateTime)).format('yyyy-MM-dd hh:mm:ss');
                        }
                    },
                    {
                        key: 'MarkingStatus',
                        title: '状态',
                        render(h, params) {
							var statusDesc = ExamMarkingStatus.getItem(params.row.MarkingStatus).text,	//状态描述文字
								isGiveUp = false,	//是否放弃了交卷
								color="green";		//状态描述颜色
							
							if (params.row.MarkingStatus != ExamMarkingStatus.READED) {
								color = "gray";
								//已交卷
								if (!params.row.PostTime) {
									var ts = new Date().deduct(params.row.CreateTime);
									if (ts.totalMinutes > params.row.MaxTime) {
										color = "red";
										isGiveUp = true;
										statusDesc = "已弃考";
									} else {
										color = "gray";
										statusDesc = "答卷中";
									}
								}
							}

                            return h("span", {
                                style: {
                                    color: color
                                }
                            },
                                statusDesc);
                        }
                    },
                    {
                        key: 'CreateTime',
                        title: '阅卷时间',
                        width: 100,
                        render(h, params) {
                            var dt = params.row.MarkingTime ? params.row.MarkingTime.toString() : '';
                            if (dt === "") {
                                return "--";
                            } else {
                                return new Date(Date.parse(dt)).format('yyyy-MM-dd hh:mm:ss');
                            }
                        }
					},
					{
						key: 'Score',
						title: '得分',
						render(h, params) {
							var score = params.row.Score
							//未阅卷
							if (params.row.MarkingStatus == ExamMarkingStatus.DIDNOT_READ) {
								return "--";
							} else {
								var color = score < params.row.Pass ? "red" : "green";
								return h("span", {
									style: {
										color: color,
										fontWeight: "bold"
									}
								},
									score);
							}
						}
					},
                    {
                        key: 'actions',
                        title: '操作',
                        width: 150,
						render(h, params) {
							//是否放弃考试(即表示 未交卷)
							var isGiveUp = false;
							//已交卷
							if (params.row.MarkingStatus != ExamMarkingStatus.READED && !params.row.PostTime) {
								var ts = new Date().deduct(params.row.CreateTime);
								isGiveUp = ts.totalMinutes > params.row.MaxTime;
							}
                            return h('p',
                                [
                                    h('i-button',
                                        {
                                            props: {
                                                type: 'primary',
                                                size: 'small'
                                            },
                                            style: {
                                                marginRight: '5px'
                                            },
                                            on: {
                                                click: () => {
                                                    location = "/exams/testdetails/" + params.row.UserExamId;
                                                }
                                            }
                                        },
										'查看'),
									h('i-button',
										{
											props: {
												type: 'error',
												size: 'small'
											},
											style: {
												marginRight: '5px',
												display: isGiveUp?'':'none'
											},
											on: {
												click: () => {
													vm.delete(params.index);
												}
											}
										},
										'删除')
                                ]);
                        }
                    }
                ],
                gridData: [
                    {
                        UserExamId: 0,
                        UserId: 0,
                        UserName: '',
                        UserMobile: '',
                        UserTitlle: '',
                        ExamId: 0,
                        ExamTitle: '',
                        ExamType: 0,    //考卷类型
                        MaxTime: 0,     //考试时间（单位：分钟）
                        ActualTime: 0,  //实际答卷所花时间（单位：分钟）
                        Total: 0,       //总分
                        Pass: 0,        //及格分
                        Score: 0,       //最后考试得分
                        CreateTime: '', //考试时间
                        PostTime: '',   //交卷时间
                        MarkingStatus: 0,   //阅卷状态
                        MarkingTime: '',    //阅卷时间
                    }
                ]
			},
            mounted() {
				this.loadQueries();
                this.loadData();
            },
            methods:
            {
                /**
				 * 加载筛选条件
				 */
				loadQueries() {
					let pageIndex,
						type,
						status;

					pageIndex =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["p"] + "'"));
					pageIndex = isNaN(pageIndex) ? 1 : Number(pageIndex);
					if (pageIndex < 1) pageIndex = 1;

					status =@(Html.Raw("'" + Html.ViewContext.HttpContext.Request.Query["status"] + "'"));
					if (status != "" && !isNaN(status)) status = Number(status);

					this.queries["p"] = pageIndex;
					this.queries["size"] = 15;
					this.queries["status"] = status;
					this.queries["total"] = 0;
				},
				/**
				 * 分页页码改变回调事件
				 * @@param {number} current 当前页码
				 */
				pagerChanged(current) {
					this.queries["p"] = current;
					reload.call(this);
				},
				/**
                 * 搜索
                */
				search() {
					this.queries["p"] = 1;
					this.queries["total"] = 0;
					reload.call(this);
				},
                /**
                 * 加载数据，会自动从searchQuery中解析搜索的参数
                 */
				loadData() {
					const postData = {
						status: this.queries.status,
						pageindex: this.queries.p,
						pagesize: this.queries.size
					};

                    Ajax.post({
                        url: "/api/userexam/myexams",
                        data: postData,
                        success: (response) => {
                            var data = response.data;
                            if (!data.Error) {
                                var pager = data.Data;
                                this.gridData = pager.Table;

								this.queries["total"] = pager.Count;
							} else {
								apiError(data.Code);
							}
						},
						error: (error) => {
							apiError(null, "数据加载失败，请重试！");
						}
                    });
				},
				/**
				 * 删除用户考卷
				 * @@param {number} index 数据项索引
				 */
				delete(index) {
					var item = this.gridData[index];
					
					Ajax.post({
						url: '/api/userexam/delete',
						data: { id: item.UserExamId },
						success: (response) => {
							var data = response.data;
							if (!data.Error) {
								this.gridData.splice(index, 1);
							} else {
								this.$Message.error(data.Message);
							}
						},
						error: (error) => {
							this.$Message.error('操作失败，请重试！');
						}
					});
				}
            }
        });

    </script>
}

