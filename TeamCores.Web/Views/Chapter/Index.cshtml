@{
    ViewData["Title"] = "课程章节管理";
}

@section style{
    <link href="~/css/chapter/chapter.css" rel="stylesheet"/>
}
<!-- demo root element -->

<div id="course_list">
    <div class="searcher">
        <span>
            所属课程：
            <i-select v-model="currentCourseId" style="width: 100px">
                <i-option value="" key="">全部</i-option>
                <i-option v-for="item in courses" :value="item.CourseId" :key="item.CourseId">{{item.Title}}</i-option>
            </i-select>
        </span>
        <span>
            <i-button type="primary" icon="ios-search" v-on:click="search">搜索</i-button>
        </span>
    </div>
    <div class="content-body">
        <div class="chapter">
            <span class="tree-operation">
                <Icon v-if="isFolder" class="tree-item-icon" :class="{ 'open' : open }" type="arrow-right-b"></Icon>
                <i-input class="w-12" type="text" v-if="treeNodeData.addMode" v-model="currentWord" placeholder="请输入章节名称"></i-input>
                <i-input class="w-12" type="text" v-if="treeNodeData.addMode" v-model="currentWord" placeholder="请输入章节内容"></i-input>

                <Upload class="upload" action="/api/uploadify/form" :show-upload-list="true">
                    <i-button type="ghost" icon="ios-cloud-upload-outline">上传视频</i-button>
                </Upload>
                <i-input class="w-12" type="text" v-if="editMode" v-model="currentWord" placeholder="请输入类别名称"></i-input>
                <span v-else>{{treeNodeData.name}}</span>
                <span v-if="treeNodeData.number">( {{treeNodeData.number}} )</span>
                <span v-if="editMode">
                    <i-button class="font-baseblue ml5" v-on:click.stop="onModify" type="text" size="small">完成</i-button>
                    <i-button class="font-base ml10" v-on:click.stop="onModifyCancel" type="text" size="small">取消</i-button>
                </span>
                <span v-if="treeNodeData.addMode">
                    <i-button class="font-baseblue ml5" v-on:click.stop="onCreate" type="text" size="small">添加</i-button>
                    <i-button class="font-base ml10" v-on:click.stop="onCreateCancel" type="text" size="small">取消</i-button>
                </span>
            </span>
            <span class="tree-item-options" v-show="!treeNodeData.addMode">
                <!-- 最多添加三层 -->
                <i-button v-on:click.stop="onCreateItem" type="text" size="small">添加子分类</i-button>
                <i-button v-on:click.stop="onModifyItem" type="text" size="small">编辑</i-button>
                <i-button v-on:click.stop="onRemove" type="text" size="small">删除</i-button>
            </span>
            <Modal v-model="showEdit" :top="50" :styles="{top: '200px'}" :width="560" v-on:on-ok="onSave">
                <p slot="header" style="text-align: center">
                    <span>新增科目</span>
                </p>
                <i-form :model="editChapter" :label-width="80">
                    <Form-item label="章节名称">
                        <i-input v-model="editChapter.Title" placeholder="请输入章节名称"></i-input>
                    </Form-item>
                    <Form-item label="章节内容">
                        <i-input v-model="editChapter.Content" placeholder="请输入章节内容"></i-input>
                    </Form-item>
                    <Form-item label="章节视频">
                        <video class="chapter-video" controls="controls" autoplay="autoplay" src="/upload/2017/08/28/20170828001840778413.ogg"></video>
                        <Upload class="upload" action="/api/uploadify/form" :default-file-list="defaultFileLst" :show-upload-list="false">
                            <i-button type="ghost" v-if="!defaultFileLst" icon="ios-cloud-upload-outline">上传视频</i-button>
                        </Upload>
                    </Form-item>
                </i-form>
            </Modal>

        </div>
        
    </div>
</div>
@section title_actions{
    <i-button type="success" v-on:click="OnAdd">新增</i-button>
}
@section page_script{
    <script src="~/js/vue/components/tree-node.js"></script>
    <script>
        var vm = new Vue({
            el: '#content',
            data: {
                courses: [], // 所有课程
                editChapter: {},
                showEdit: true,
                treeNodeData: {
                    addMode: true,
                    children: [{ addMode: true }]
                }, // 树结构数据源
                currentWord: '',
                chapters: [], // 课程下的章节
                currentCourseId: '', // 当前课程Id
                editMode: false,
                defaultFileLst: [
                    {
                        name: "abc.mp4",
                        url:"http://baidu.com"
                    }
                ]
            },
            components: {
                'tree-node': treeNode
            },
            created: function() {
                this.getCourses();
            },
            computed: {
                isFolder() {
                    return this.treeNodeData.children && this.treeNodeData.children.length;
                }
            },
            methods:
            {
                /**
                 * 获取所有的课程
                 */
                getCourses() {
                    var _this = this;
                    Ajax.post({
                        url: "/api/course/search",
                        data: {
                            pageIndex: 1,
                            pageSize: 100
                        },
                        success: (response) => {
                            var data = response.data;
                            if (!data.Error) {
                                const pager = data.Data;
                                _this.courses = pager.Table;
                                console.log(_this.courses);
                            }
                        },
                        error: (error) => {
                        }
                    });
                },
                /**
                 * 搜索
                */
                search() {
                    this.loadData();
                },
                /**
                 * 加载数据，会自动从searchQuery中解析搜索的参数
                 */
                loadData() {
                    var _this = this;
                    const pagesize = 10000;
                    const pageindex = 1;
                    const courseId = currentCourseId;

                    if (!courseId || courseId.length == 0) {
                        _this.$Message.error("请先选择课程!");
                        return;
                    }

                    const postData = {
                        courseId: courseId,
                        pageindex: pageindex,
                        pagesize: pagesize
                    };

                    Ajax.post({
                        url: "/api/chapter/search",
                        data: postData,
                        success: (response) => {
                            var data = response.data;
                            if (!data.Error) {
                                const pager = data.Data;
                                _this.chapters = pager.Table;
                            }
                        },
                        error: (error) => {
                        }
                    });
                },

                /**
                 * 新增按钮点击事件
                */
                OnAdd() {
                },
                /**
                 * 编辑按钮点击事件
                 * @@param item 选中的课程
                 */
                OnEdit(item) {
                    const courseId = item.CourseId;
                    location = `/course/edit/${courseId}`;
                },
                /**
                 * 保存按钮点击事件
                 */
                onSave() {

                },
                /**
                 * 删除按钮点击事件
                 * @@param item
                 */
                OnDelete(item) {

                },
                /**
                 * 启用禁用
                 */
                setStatus(index) {
                    // 操作
                    let action;
                    var nextStatus;

                    var item = this.gridData[index];
                    console.log(index);

                    //如果当前用户状态为“启用”，则将改变为“禁用”,反之则改变为“启用”状态
                    if (item.Status == CourseStatus.ENABLED) {
                        action = 'setdisable';
                        nextStatus = CourseStatus.DISABLED;
                    } else {
                        action = 'setenable';
                        nextStatus = CourseStatus.ENABLED;
                    }

                    Ajax.post({
                        url: `/api/course/${action}`,
                        data: { id: item.CourseId },
                        success: (response) => {
                            var data = response.data;
                            if (!data.Error) {
                                item.Status = nextStatus.toString('d');
                            } else {
                                this.$Message.error(data.Message);
                            }
                        },
                        error: (error) => {
                            this.$Message.error('操作失败，请重试！');
                        }
                    });
                },

                /**
                 * 删除点击事件
                 * @@param courseId 考题Id
                 */
                onDelte(courseId) {
                    this.$Modal.confirm({
                        title: '系统提示',
                        content: '确认要删除该课程吗?',
                        onOk: () => {
                            this.deleteCourse(courseId);
                        },
                        onCancel: () => {
                        }
                    });
                },

                /**
                 * 删除
                 * @@param courseId
                 */
                deleteCourse(courseId) {
                    Ajax.post({
                        url: '/api/course/delete',
                        data: { id: courseId },
                        success: (response) => {
                            var data = response.data;
                            if (!data.Error) {
                                this.$Message.success('删除成功！');
                                this.loadData();
                            } else
                                this.$Message.error(data.Message);
                        },
                        error: (error) => {
                            this.$Message.error('操作失败，请重试！');
                        }
                    });
                },
            }
        });

    </script>
}